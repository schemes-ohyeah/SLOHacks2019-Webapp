{"version":3,"sources":["img/logo.png","components/AudioTranscriber.js","util/Firebase.js","components/LogoIcon.js","pages/home.js","util/DragonBoard.js","util/GoogleSpeech.js","pages/detail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AudioTranscriber","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initAudioRecorder","recognition","webkitSpeechRecognition","lang","interimResults","maxAlternatives","onresult","event","result","results","transcript","sendRecognizedSpeech","start","speechRecognition","undefined","_this2","react_default","a","createElement","className","onClick","Mic_default","React","Component","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","command","db","collection","add","name","successRate","timestamp","Date","toISOString","orderBy","get","then","querySnapshot","Promise","resolve","data","forEach","doc","dataPoint","id","push","commandId","limit","attemptId","update","success","getAttempt","recentAttempt","getFirstAttempt","firstAttempt","fetch","method","headers","Headers","Content-Type","body","JSON","stringify","reference","measurements","recent","response","json","totalError","error_x","error_y","error_z","console","log","updateAttempt","normalizeCommandSuccess","listAttempts","newSuccessRate","filter","item","length","LogoIcon","src","dog","style","height","alt","PureComponent","Home","acceptVoiceSample","modalOff","addCommand","state","voiceSample","toLowerCase","docRef","history","concat","modalOn","setState","determinedVoiceSample","showModal","receiveRecognizedSpeech","commands","listCommands","classes","AppBar_default","position","Toolbar_default","Typography_default","variant","color","grow","LogoIcon_LogoIcon","CircularProgress_default","List_default","padding","map","commandName","toUpperCase","substring","Math","round","ListItem_default","button","component","Link","key","to","ListItemText_default","primary","secondary","isNaN","Fab_default","fab","Dialog_default","open","onClose","DialogTitle_default","DialogContent_default","dialogContent","AudioTranscriber_AudioTranscriber","DialogActions_default","Button_default","disabled","withRouter","withStyles","theme","root","backgroundColor","palette","background","paper","width","minHeight","bottom","spacing","unit","right","textAlign","DragonBoard","IP_ADDRESS","command_id","status","text","GoogleSpeech","message","audioConfig","audioEncoding","pitch","speakingRate","input","voice","languageCode","Audio","audioContent","play","catch","error","Detail","getData","getCommand","match","params","handleLoopStatusUpdate","loopStatus","LOOP_STATUS","idle","_startRecording","recording","_stopRecording","wait","alert","_moveDog","_processData","speak","startAccelerometer","warn","stopAccelerometer","validateAttempt","AppBar_AppBar_default","Toolbar_Toolbar_default","IconButton_default","menuButton","aria-label","KeyboardBackspace_default","Typography_Typography_default","title","attempts","index","ListItemAvatar_default","Avatar_default","successAvatar","failAvatar","Check_default","Close_default","moment","fromNow","Fab_Fab_default","PlayArrow_default","Stop_default","HourglassFull_default","flexGrow","marginLeft","marginRight","margin","green","red","marginTop","createMuiTheme","main","brown","App","MuiThemeProvider_default","CssBaseline_default","BrowserRouter","Switch","Route","exact","path","overflowY","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.670b4b85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3fa51164.png\";","import React from \"react\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport \"./AudioTranscriber.css\";\r\n\r\nexport default class AudioTranscriber extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.speechRecognition = undefined;\r\n        this.initAudioRecorder();\r\n    }\r\n\r\n    initAudioRecorder = () => {\r\n        // eslint-disable-next-line\r\n        const recognition = new webkitSpeechRecognition();\r\n        recognition.lang = \"en-US\";\r\n        recognition.interimResults = false;\r\n        recognition.maxAlternatives = 1;\r\n\r\n        recognition.onresult = (event) => {\r\n            const result = event.results[0][0].transcript;\r\n            this.props.sendRecognizedSpeech(result);\r\n        };\r\n\r\n        recognition.start();\r\n\r\n        this.speechRecognition = recognition;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mic-icon-animation\" onClick={() => this.speechRecognition.start()}>\r\n                <MicIcon/>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as firebase from \"firebase\";\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyA_0IhKpkkLMrzIl4zS8N306XibgNoRTP4\",\r\n    authDomain: \"slohacks-dog-instrucc.firebaseapp.com\",\r\n    databaseURL: \"https://slohacks-dog-instrucc.firebaseio.com\",\r\n    projectId: \"slohacks-dog-instrucc\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"504644134709\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nexport default class Firebase {\r\n    static db = firebase.firestore();\r\n\r\n    /**\r\n     * Adds a new command\r\n     *\r\n     * @param command\r\n     * @returns {Promise<firebase.firestore.DocumentReference>}\r\n     */\r\n    static addCommand(command) {\r\n        return Firebase.db.collection(\"commands\").add({\r\n            name: command,\r\n            successRate: 0,\r\n            timestamp: new Date().toISOString()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all commands sorted newest first. Document id\r\n     * is merged into the document data for convenient look up\r\n     *\r\n     * @returns {Promise<firebase.firestore.QuerySnapshot>}\r\n     */\r\n    static listCommands() {\r\n        return Firebase.db\r\n            .collection(\"commands\")\r\n            .orderBy(\"timestamp\", \"desc\")\r\n            .get()\r\n            .then(querySnapshot => {\r\n                return new Promise(resolve => {\r\n                    const data = [];\r\n                    querySnapshot.forEach(doc => {\r\n                        const dataPoint = doc.data();\r\n                        dataPoint.id = doc.id;\r\n                        data.push(dataPoint);\r\n                    });\r\n                    resolve(data);\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets the details of a specific command - unlike listCommands,\r\n     * document id is not merged into the response because it is already\r\n     * known (provided as argument)\r\n     *\r\n     * @param commandId\r\n     * @returns {Promise<firebase.firestore.DocumentData>}\r\n     */\r\n    static getCommand(commandId) {\r\n        return Firebase.db\r\n            .collection(\"commands\")\r\n            .doc(commandId)\r\n            .get()\r\n            .then(doc => doc.data())\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all attempts for a specific command. Document id\r\n     * is merged into the document data for convenient look up\r\n     *\r\n     * @param commandId\r\n     * @returns {Promise<firebase.firestore.QuerySnapshot>}\r\n     */\r\n    static listAttempts(commandId) {\r\n        return Firebase.db\r\n            .collection(\"commands\")\r\n            .doc(commandId)\r\n            .collection(\"attempts\")\r\n            .orderBy(\"timestamp\", \"desc\")\r\n            .get()\r\n            .then(querySnapshot => {\r\n                return new Promise(resolve => {\r\n                    const data = [];\r\n                    querySnapshot.forEach(doc => {\r\n                        const dataPoint = doc.data();\r\n                        dataPoint.id = doc.id;\r\n                        data.push(dataPoint);\r\n                    });\r\n                    resolve(data);\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets the first command\r\n     *\r\n     * @param commandId\r\n     * @returns {Promise<firebase.firestore.QuerySnapshot>}\r\n     */\r\n    static getFirstAttempt(commandId) {\r\n        return Firebase.db\r\n            .collection(\"commands\")\r\n            .doc(commandId)\r\n            .collection(\"attempts\")\r\n            .orderBy(\"timestamp\", \"desc\")\r\n            .limit(1)\r\n            .get()\r\n            .then(querySnapshot => {\r\n                return new Promise(resolve => {\r\n                    let data = {};\r\n                    querySnapshot.forEach(doc => {\r\n                        data = doc.data();\r\n                        data.id = doc.id;\r\n                    });\r\n                    resolve(data);\r\n                })\r\n            })\r\n    }\r\n    /**\r\n     * Gets a specific attempt - typically used in non validated state\r\n     *\r\n     * @param commandId\r\n     * @param attemptId\r\n     */\r\n    static getAttempt(commandId, attemptId) {\r\n        return Firebase.db\r\n            .collection(\"commands\")\r\n            .doc(commandId)\r\n            .collection(\"attempts\")\r\n            .doc(attemptId)\r\n            .get()\r\n            .then(doc => doc.data());\r\n    }\r\n\r\n    /**\r\n     * After calculating attempt to be success or fail, update database\r\n     *\r\n     * @param commandId\r\n     * @param attemptId\r\n     * @param result true | false\r\n     * @returns {Promise<void>}\r\n     */\r\n    static updateAttempt(commandId, attemptId, result) {\r\n        return Firebase.db\r\n            .collection(\"commands\")\r\n            .doc(commandId)\r\n            .collection(attemptId)\r\n            .doc(attemptId)\r\n            .update({\r\n                success: result\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Submits data to Google Cloud Function to calculate if the move was successful\r\n     *\r\n     * @param commandId\r\n     * @param attemptId\r\n     */\r\n    static validateAttempt(commandId, attemptId) {\r\n        return Firebase.getAttempt(commandId, attemptId)\r\n            .then(recentAttempt => {\r\n                Firebase.getFirstAttempt(commandId)\r\n                    .then(firstAttempt => {\r\n                        fetch(\"https://us-central1-slohacks-dog-instrucc.cloudfunctions.net/function-1\", {\r\n                            method: \"POST\",\r\n                            headers: new Headers({\r\n                                \"Content-Type\": \"appliation/json\"\r\n                            }),\r\n                            body: JSON.stringify({\r\n                                reference: firstAttempt.measurements,\r\n                                recent: recentAttempt.measurements\r\n                            })\r\n                        })\r\n                            .then(response => response.json())\r\n                            .then(data => {\r\n                                const ERROR_THRESHOLD = 100;\r\n                                const totalError = data.error_x + data.error_y + data.error_z;\r\n                                console.log(totalError);\r\n                                const success = totalError < ERROR_THRESHOLD;\r\n                                Firebase.updateAttempt(commandId, attemptId, success)\r\n                                    .then(() => {\r\n                                        return Firebase.normalizeCommandSuccess(commandId);\r\n                                    });\r\n                            });\r\n                    })\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Once new attempt is determined, calculate new success rate for entire command\r\n     *\r\n     * @param commandId\r\n     * @returns {Promise<void>}\r\n     */\r\n    static normalizeCommandSuccess(commandId) {\r\n        return Firebase.listAttempts(commandId)\r\n            .then(data => {\r\n                const newSuccessRate = data.filter(item => item.success).length / data.length;\r\n                return Firebase.db\r\n                    .collection(\"commands\")\r\n                    .doc(commandId)\r\n                    .update({\r\n                        successRate: newSuccessRate\r\n                    });\r\n            })\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport dog from \"../img/logo.png\";\r\n\r\n\r\nexport default class LogoIcon extends React.PureComponent {\r\n    render() {\r\n        return <img src={dog} style={{height: \"1rem\"}} alt=\"Dog icon\"/>\r\n    }\r\n}","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport List from \"@material-ui/core/List/List\";\r\nimport ListItem from \"@material-ui/core/ListItem/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport Dialog from \"@material-ui/core/Dialog/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions/DialogActions\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport DialogContent from \"@material-ui/core/DialogContent/DialogContent\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AudioTranscriber from \"../components/AudioTranscriber\";\r\nimport Firebase from \"../util/Firebase\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\";\r\nimport {withRouter} from \"react-router\";\r\nimport LogoIcon from \"../components/LogoIcon\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        width: 500,\r\n        position: 'relative',\r\n        minHeight: 200,\r\n    },\r\n    fab: {\r\n        position: 'absolute',\r\n        bottom: theme.spacing.unit * 2,\r\n        right: theme.spacing.unit * 2,\r\n    },\r\n    dialogContent: {\r\n        textAlign: \"center\"\r\n    }\r\n});\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            commands: undefined,\r\n            determinedVoiceSample: false,\r\n            showModal: false,\r\n            voiceSample: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        Firebase.listCommands().then(commands => this.setState({commands}));\r\n    }\r\n\r\n    acceptVoiceSample = () => {\r\n        this.modalOff();\r\n        Firebase.addCommand(this.state.voiceSample.toLowerCase())\r\n            .then(docRef => {\r\n                this.props.history.push(`/detail/${docRef.id}`);\r\n            });\r\n    };\r\n\r\n    modalOn = () => {\r\n        this.setState({\r\n            determinedVoiceSample: false,\r\n            showModal: true,\r\n            voiceSample: \"\"\r\n        });\r\n    };\r\n\r\n    modalOff = () => {\r\n        this.setState({\r\n            showModal: false\r\n        });\r\n    };\r\n\r\n    receiveRecognizedSpeech = (result) => {\r\n        this.setState({\r\n            determinedVoiceSample: true,\r\n            voiceSample: result\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (\r\n            <div>\r\n                {/* Application bar */}\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                            <LogoIcon/>{\" Dog Instrucc\"}\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {/* List of doggo commands */}\r\n                {\r\n                    this.state.commands === undefined\r\n                        ? <CircularProgress/>\r\n                        : <List>\r\n                            {\r\n                                this.state.commands.length === 0\r\n                                    ? <Typography style={{padding: \"1rem\"}}>\r\n                                        No entries yet. Click the button at the bottom to get started!\r\n                                    </Typography>\r\n                                    : this.state.commands.map(command => {\r\n                                        const commandName = command.name[0].toUpperCase() + command.name.substring(1);\r\n                                        const successRate = Math.round(command.successRate * 100);\r\n                                        return (\r\n                                            <ListItem\r\n                                                button\r\n                                                component={Link}\r\n                                                key={command.id}\r\n                                                to={`/detail/${command.id}`}>\r\n                                                <ListItemText\r\n                                                    primary={commandName}\r\n                                                    secondary={`${isNaN(successRate) ? 0 : successRate}%`}/>\r\n                                            </ListItem>\r\n                                        );\r\n                                    })\r\n                            }\r\n                        </List>\r\n                }\r\n\r\n                {/* Add new command button */}\r\n                <Fab\r\n                    className={classes.fab}\r\n                    color=\"secondary\"\r\n                    onClick={this.modalOn}>\r\n                    <i className=\"fas fa-paw\"/>\r\n                </Fab>\r\n\r\n                {/* Add new command modal */}\r\n                <Dialog\r\n                    open={this.state.showModal}\r\n                    onClose={this.state.modalOff}>\r\n                    <DialogTitle>Speak a voice command</DialogTitle>\r\n                    <DialogContent className={classes.dialogContent}>\r\n                        <AudioTranscriber\r\n                            sendRecognizedSpeech={this.receiveRecognizedSpeech}/>\r\n                        <Typography>{this.state.voiceSample}</Typography>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            onClick={this.modalOff}\r\n                            color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            onClick={this.acceptVoiceSample}\r\n                            color=\"primary\"\r\n                            disabled={!this.state.determinedVoiceSample}>\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(Home));","export default class DragonBoard {\r\n    static IP_ADDRESS = \"127.0.0.1\";\r\n\r\n    /**\r\n     * Tells DragonBoard to start recording accelerometer values\r\n     * with a provided Firebase document id to save to\r\n     *\r\n     * @param commandId\r\n     * @returns {Promise<number>}\r\n     */\r\n    static startAccelerometer(commandId) {\r\n        return fetch(DragonBoard.IP_ADDRESS, {\r\n            method: \"POST\",\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify({command_id: commandId})\r\n        }).then(response => response.status);\r\n    }\r\n\r\n    /**\r\n     * Tells DragonBoard to stop recording - the board will upload\r\n     * to Firebase return newly generated document id in the http text\r\n     *\r\n     * @returns {Promise<string>}\r\n     */\r\n    static stopAccelerometer() {\r\n        return fetch(DragonBoard.IP_ADDRESS, {\r\n            method: \"GET\"\r\n        }).then(response => response.text())\r\n    }\r\n}","const token = \"AIzaSyA_0IhKpkkLMrzIl4zS8N306XibgNoRTP4\";\r\n\r\nexport default class GoogleSpeech {\r\n    /**\r\n     * Reads message out loud.\r\n     * Promise finishes when clip is done playing.\r\n     *\r\n     * @param message\r\n     * @returns {Promise<void>}\r\n     */\r\n    static speak(message) {\r\n        return fetch(`https://texttospeech.googleapis.com/v1/text:synthesize?key=${token}`, {\r\n            method: \"POST\",\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify({\r\n                audioConfig: {\r\n                    audioEncoding: \"MP3\",\r\n                    pitch: \"0.00\",\r\n                    speakingRate: \"1.00\"\r\n                },\r\n                input: {\r\n                    text: message\r\n                },\r\n                voice: {\r\n                    languageCode: \"en-US\",\r\n                    name: \"en-US-Wavenet-B\"\r\n                }\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const audio = new Audio(`data:audio/mp3;base64,${data.audioContent}`);\r\n                return audio.play();\r\n            })\r\n            .catch(error => console.error(error));\r\n    }\r\n}","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport Fab from \"@material-ui/core/Fab/Fab\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport BackButton from \"@material-ui/icons/KeyboardBackspace\";\r\nimport {Link} from \"react-router-dom\";\r\nimport withStyles from \"@material-ui/core/es/styles/withStyles\";\r\nimport PlayIcon from \"@material-ui/icons/PlayArrow\";\r\nimport StopIcon from \"@material-ui/icons/Stop\";\r\nimport WaitIcon from \"@material-ui/icons/HourglassFull\";\r\nimport List from \"@material-ui/core/List/List\";\r\nimport ListItem from \"@material-ui/core/ListItem/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar/Avatar\";\r\nimport moment from \"moment\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport SuccessIcon from \"@material-ui/icons/Check\";\r\nimport FailIcon from \"@material-ui/icons/Close\";\r\nimport Firebase from \"../util/Firebase\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\";\r\nimport DragonBoard from \"../util/DragonBoard\";\r\nimport GoogleSpeech from \"../util/GoogleSpeech\";\r\nimport LogoIcon from \"../components/LogoIcon\";\r\n\r\nconst styles = theme => ({\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginLeft: -12,\r\n        marginRight: 10,\r\n    },\r\n    fab: {\r\n        position: 'absolute',\r\n        bottom: theme.spacing.unit * 2,\r\n        right: theme.spacing.unit * 2,\r\n    },\r\n    successAvatar: {\r\n        margin: 10,\r\n        backgroundColor: green[400]\r\n    },\r\n    failAvatar: {\r\n        margin: 10,\r\n        backgroundColor: red[500]\r\n    },\r\n    title: {\r\n        marginTop: 20,\r\n        textAlign: \"center\"\r\n    }\r\n});\r\n\r\nclass Detail extends React.Component {\r\n    static LOOP_STATUS = {\r\n        idle: 0,\r\n        recording: 1,\r\n        wait: 2\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: undefined,\r\n            loopStatus: Detail.LOOP_STATUS.idle\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n\r\n    get successRate() {\r\n        if (this.state.data === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        const successRate = Math.round(this.state.data.successRate * 100);\r\n        return isNaN(successRate) ? 0 : successRate;\r\n    }\r\n\r\n    get title() {\r\n        if (this.state.data === undefined) {\r\n            return \"\";\r\n        }\r\n\r\n        return this.state.data.name[0].toUpperCase() + this.state.data.name.substring(1);\r\n    }\r\n\r\n    getData = () => {\r\n        Firebase.getCommand(this.props.match.params.id)\r\n            .then(data => this.setState({data}));\r\n    };\r\n\r\n    handleLoopStatusUpdate = () => {\r\n        if (this.state.loopStatus === Detail.LOOP_STATUS.idle) {\r\n            this._startRecording();\r\n        }\r\n        else if (this.state.loopStatus === Detail.LOOP_STATUS.recording) {\r\n            this._stopRecording();\r\n        }\r\n        else if (this.state.loopStatus === Detail.LOOP_STATUS.wait) {\r\n            // Do nothing - user shouldn't be allowed to click at this time\r\n        }\r\n        else {\r\n            alert(\"Oh no, something went wrong. :(\");\r\n            this.setState({\r\n                loopStatus: Detail.LOOP_STATUS.idle\r\n            });\r\n        }\r\n    };\r\n\r\n    _startRecording = () => {\r\n        this.setState({\r\n            loopStatus: Detail.LOOP_STATUS.wait\r\n        }, this._moveDog);\r\n    };\r\n\r\n    _stopRecording = () => {\r\n        this.setState({\r\n            loopStatus: Detail.LOOP_STATUS.wait\r\n        }, this._processData);\r\n    };\r\n\r\n    _moveDog = () => {\r\n        // Play TTS\r\n        GoogleSpeech.speak(this.state.data.name);\r\n\r\n        // Start recording\r\n        DragonBoard.startAccelerometer(this.props.match.params.id)\r\n            .then(status => {\r\n                if (status === 201) {\r\n                    this.setState({\r\n                        loopStatus: Detail.LOOP_STATUS.recording\r\n                    });\r\n                }\r\n                else {\r\n                    console.warn(status, \"Something went wrong. Restarting process.\");\r\n                    this.setState({\r\n                        loopStatus: Detail.LOOP_STATUS.idle\r\n                    })\r\n                }\r\n            })\r\n    };\r\n\r\n    _processData = () => {\r\n        DragonBoard.stopAccelerometer()\r\n            .then(attemptId => {\r\n                Firebase.validateAttempt(this.props.match.params.id, attemptId)\r\n                    .then(this.getData);\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                {/* Application bar */}\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            className={classes.menuButton}\r\n                            color=\"inherit\"\r\n                            aria-label=\"back\"\r\n                            component={Link}\r\n                            to=\"/\">\r\n                            <BackButton/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                            <LogoIcon/>{\" Command Training\"}\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {\r\n                    this.state.data === undefined\r\n                        ? <CircularProgress/>\r\n                        : <div>\r\n                            {/* Success rate */}\r\n                            <Typography\r\n                                className={classes.title}\r\n                                variant=\"h2\">\r\n                                {this.successRate}%\r\n                            </Typography>\r\n                            {/* Skill name */}\r\n                            <Typography\r\n                                className={classes.title}\r\n                                variant=\"h6\">\r\n                                {this.title}\r\n                            </Typography>\r\n\r\n                            {/* History */}\r\n                            <List>\r\n                                {\r\n                                    this.state.data.attempts\r\n                                        ? this.state.data.attempts.map((item, index) => (\r\n                                            <ListItem key={index}>\r\n                                                <ListItemAvatar>\r\n                                                    <Avatar\r\n                                                        className={item.success ? classes.successAvatar : classes.failAvatar}>\r\n                                                        {\r\n                                                            item.success ? <SuccessIcon/> : <FailIcon/>\r\n                                                        }\r\n                                                    </Avatar>\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText primary={moment(item.timestamp).fromNow()}/>\r\n                                            </ListItem>\r\n                                        ))\r\n                                        : <Typography style={{padding: \"1rem\"}}>\r\n                                            No entries yet. Click the button at the bottom to start recording!\r\n                                        </Typography>\r\n                                }\r\n                            </List>\r\n                        </div>\r\n                }\r\n\r\n                {/* Loop status update */}\r\n                <Fab\r\n                    className={classes.fab}\r\n                    color=\"secondary\"\r\n                    disabled={this.state.loopStatus === Detail.LOOP_STATUS.wait}\r\n                    onClick={this.handleLoopStatusUpdate}>\r\n                    {\r\n                        this.state.loopStatus === Detail.LOOP_STATUS.idle &&\r\n                        <PlayIcon/>\r\n                    }\r\n                    {\r\n                        this.state.loopStatus === Detail.LOOP_STATUS.recording &&\r\n                        <StopIcon/>\r\n                    }\r\n                    {\r\n                        this.state.loopStatus === Detail.LOOP_STATUS.wait &&\r\n                        <WaitIcon/>\r\n                    }\r\n                </Fab>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Detail);","import React, {Component} from 'react';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Switch from \"react-router/es/Switch\";\nimport {Route} from \"react-router\";\nimport Home from \"./pages/home\";\nimport Detail from \"./pages/detail\";\nimport CssBaseline from \"@material-ui/core/CssBaseline/CssBaseline\";\nimport withStyles from \"@material-ui/core/es/styles/withStyles\";\nimport MuiThemeProvider from \"@material-ui/core/styles/MuiThemeProvider\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport {brown, green} from \"@material-ui/core/colors\";\n\nconst styles = theme => ({\n    root: {\n        backgroundColor: theme.palette.background.paper,\n        height: \"100vh\",\n        overflowY: \"scroll\"\n    }\n});\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: green[400]\n        },\n        secondary: {\n            main: brown[600]\n        }\n    }\n});\n\nclass App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <div className={this.props.classes.root}>\n                    <CssBaseline/>\n                    <BrowserRouter>\n                        <Switch>\n                            <Route component={Home} exact path=\"/\"/>\n                            <Route component={Detail} path=\"/detail/:id\"/>\n                        </Switch>\n                    </BrowserRouter>\n                </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default withStyles(styles)(App);\n","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            console.log('Content is cached for offline use.');\n\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    fetch(swUrl)\n        .then(response => {\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}