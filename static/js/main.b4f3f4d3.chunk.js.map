{"version":3,"sources":["img/logo.png","components/AudioTranscriber.js","util/Firebase.js","components/LogoIcon.js","pages/home.js","util/DragonBoard.js","util/GoogleSpeech.js","pages/detail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AudioTranscriber","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initAudioRecorder","recognition","webkitSpeechRecognition","lang","interimResults","maxAlternatives","onresult","event","result","results","transcript","sendRecognizedSpeech","start","speechRecognition","undefined","_this2","react_default","a","createElement","className","onClick","Mic_default","React","Component","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","command","db","collection","add","name","successRate","timestamp","Date","toISOString","orderBy","get","then","querySnapshot","Promise","resolve","data","forEach","doc","dataPoint","id","push","commandId","LogoIcon","src","dog","style","height","alt","PureComponent","Home","acceptVoiceSample","modalOff","addCommand","state","voiceSample","toLowerCase","docRef","history","concat","modalOn","setState","determinedVoiceSample","showModal","receiveRecognizedSpeech","commands","listCommands","classes","AppBar_default","position","Toolbar_default","Typography_default","variant","color","grow","LogoIcon_LogoIcon","CircularProgress_default","List_default","length","padding","map","commandName","toUpperCase","substring","Math","round","ListItem_default","button","component","Link","key","to","ListItemText_default","primary","secondary","isNaN","Fab_default","fab","Dialog_default","open","onClose","DialogTitle_default","DialogContent_default","dialogContent","AudioTranscriber_AudioTranscriber","DialogActions_default","Button_default","disabled","withRouter","withStyles","theme","root","backgroundColor","palette","background","paper","width","minHeight","bottom","spacing","unit","right","textAlign","DragonBoard","fetch","IP_ADDRESS","method","headers","Headers","Content-Type","body","JSON","stringify","command_id","response","status","text","GoogleSpeech","message","audioConfig","audioEncoding","pitch","speakingRate","input","voice","languageCode","json","Audio","audioContent","play","catch","error","console","Detail","handleLoopStatusUpdate","loopStatus","LOOP_STATUS","idle","_startRecording","recording","_stopRecording","wait","alert","_moveDog","_processData","speak","startAccelerometer","match","params","warn","stopAccelerometer","attemptId","getCommand","AppBar_AppBar_default","Toolbar_Toolbar_default","IconButton_default","menuButton","aria-label","KeyboardBackspace_default","Typography_Typography_default","title","attempts","item","index","ListItemAvatar_default","Avatar_default","success","successAvatar","failAvatar","Check_default","Close_default","moment","fromNow","Fab_Fab_default","PlayArrow_default","Stop_default","HourglassFull_default","flexGrow","marginLeft","marginRight","margin","green","red","marginTop","createMuiTheme","main","brown","App","MuiThemeProvider_default","CssBaseline_default","BrowserRouter","Switch","Route","exact","path","overflowY","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b4f3f4d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3fa51164.png\";","import React from \"react\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport \"./AudioTranscriber.css\";\r\n\r\nexport default class AudioTranscriber extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.speechRecognition = undefined;\r\n        this.initAudioRecorder();\r\n    }\r\n\r\n    initAudioRecorder = () => {\r\n        // eslint-disable-next-line\r\n        const recognition = new webkitSpeechRecognition();\r\n        recognition.lang = \"en-US\";\r\n        recognition.interimResults = false;\r\n        recognition.maxAlternatives = 1;\r\n\r\n        recognition.onresult = (event) => {\r\n            const result = event.results[0][0].transcript;\r\n            this.props.sendRecognizedSpeech(result);\r\n        };\r\n\r\n        recognition.start();\r\n\r\n        this.speechRecognition = recognition;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mic-icon-animation\" onClick={() => this.speechRecognition.start()}>\r\n                <MicIcon/>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as firebase from \"firebase\";\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyA_0IhKpkkLMrzIl4zS8N306XibgNoRTP4\",\r\n    authDomain: \"slohacks-dog-instrucc.firebaseapp.com\",\r\n    databaseURL: \"https://slohacks-dog-instrucc.firebaseio.com\",\r\n    projectId: \"slohacks-dog-instrucc\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"504644134709\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nexport default class Firebase {\r\n    static db = firebase.firestore();\r\n\r\n    /**\r\n     * Adds a new command\r\n     *\r\n     * @param command\r\n     * @returns {Promise<firebase.firestore.DocumentReference>}\r\n     */\r\n    static addCommand(command) {\r\n        return Firebase.db.collection(\"commands\").add({\r\n            name: command,\r\n            successRate: 0,\r\n            timestamp: new Date().toISOString()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all commands sorted newest first. Document id\r\n     * is merged into the document data for convenient look up\r\n     *\r\n     * @returns {Promise<firebase.firestore.QuerySnapshot>}\r\n     */\r\n    static listCommands() {\r\n        return Firebase.db\r\n            .collection(\"commands\")\r\n            .orderBy(\"timestamp\", \"desc\")\r\n            .get()\r\n            .then(querySnapshot => {\r\n                return new Promise(resolve => {\r\n                    const data = [];\r\n                    querySnapshot.forEach(doc => {\r\n                        const dataPoint = doc.data();\r\n                        dataPoint.id = doc.id;\r\n                        data.push(dataPoint);\r\n                    });\r\n                    resolve(data);\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets the details of a specific command - unlike listCommands,\r\n     * document id is not merged into the response because it is already\r\n     * known (provided as argument)\r\n     *\r\n     * @param commandId\r\n     * @returns {Promise<firebase.firestore.DocumentData>}\r\n     */\r\n    static getCommand(commandId) {\r\n        return Firebase.db\r\n            .collection(\"commands\")\r\n            .doc(commandId)\r\n            .get()\r\n            .then(doc => {\r\n                return doc.data();\r\n            })\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport dog from \"../img/logo.png\";\r\n\r\n\r\nexport default class LogoIcon extends React.PureComponent {\r\n    render() {\r\n        return <img src={dog} style={{height: \"1rem\"}} alt=\"Dog icon\"/>\r\n    }\r\n}","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport List from \"@material-ui/core/List/List\";\r\nimport ListItem from \"@material-ui/core/ListItem/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport Dialog from \"@material-ui/core/Dialog/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions/DialogActions\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport DialogContent from \"@material-ui/core/DialogContent/DialogContent\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AudioTranscriber from \"../components/AudioTranscriber\";\r\nimport Firebase from \"../util/Firebase\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\";\r\nimport {withRouter} from \"react-router\";\r\nimport LogoIcon from \"../components/LogoIcon\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        width: 500,\r\n        position: 'relative',\r\n        minHeight: 200,\r\n    },\r\n    fab: {\r\n        position: 'absolute',\r\n        bottom: theme.spacing.unit * 2,\r\n        right: theme.spacing.unit * 2,\r\n    },\r\n    dialogContent: {\r\n        textAlign: \"center\"\r\n    }\r\n});\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            commands: undefined,\r\n            determinedVoiceSample: false,\r\n            showModal: false,\r\n            voiceSample: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        Firebase.listCommands().then(commands => this.setState({commands}));\r\n    }\r\n\r\n    acceptVoiceSample = () => {\r\n        this.modalOff();\r\n        Firebase.addCommand(this.state.voiceSample.toLowerCase())\r\n            .then(docRef => {\r\n                this.props.history.push(`/detail/${docRef.id}`);\r\n            });\r\n    };\r\n\r\n    modalOn = () => {\r\n        this.setState({\r\n            determinedVoiceSample: false,\r\n            showModal: true,\r\n            voiceSample: \"\"\r\n        });\r\n    };\r\n\r\n    modalOff = () => {\r\n        this.setState({\r\n            showModal: false\r\n        });\r\n    };\r\n\r\n    receiveRecognizedSpeech = (result) => {\r\n        this.setState({\r\n            determinedVoiceSample: true,\r\n            voiceSample: result\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (\r\n            <div>\r\n                {/* Application bar */}\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                            <LogoIcon/>{\" Dog Instrucc\"}\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {/* List of doggo commands */}\r\n                {\r\n                    this.state.commands === undefined\r\n                        ? <CircularProgress/>\r\n                        : <List>\r\n                            {\r\n                                this.state.commands.length === 0\r\n                                    ? <Typography style={{padding: \"1rem\"}}>\r\n                                        No entries yet. Click the button at the bottom to get started!\r\n                                    </Typography>\r\n                                    : this.state.commands.map(command => {\r\n                                        const commandName = command.name[0].toUpperCase() + command.name.substring(1);\r\n                                        const successRate = Math.round(command.successRate * 100);\r\n                                        return (\r\n                                            <ListItem\r\n                                                button\r\n                                                component={Link}\r\n                                                key={command.id}\r\n                                                to={`/detail/${command.id}`}>\r\n                                                <ListItemText\r\n                                                    primary={commandName}\r\n                                                    secondary={`${isNaN(successRate) ? 0 : successRate}%`}/>\r\n                                            </ListItem>\r\n                                        );\r\n                                    })\r\n                            }\r\n                        </List>\r\n                }\r\n\r\n                {/* Add new command button */}\r\n                <Fab\r\n                    className={classes.fab}\r\n                    color=\"secondary\"\r\n                    onClick={this.modalOn}>\r\n                    <i className=\"fas fa-paw\"/>\r\n                </Fab>\r\n\r\n                {/* Add new command modal */}\r\n                <Dialog\r\n                    open={this.state.showModal}\r\n                    onClose={this.state.modalOff}>\r\n                    <DialogTitle>Speak a voice command</DialogTitle>\r\n                    <DialogContent className={classes.dialogContent}>\r\n                        <AudioTranscriber\r\n                            sendRecognizedSpeech={this.receiveRecognizedSpeech}/>\r\n                        <Typography>{this.state.voiceSample}</Typography>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            onClick={this.modalOff}\r\n                            color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            onClick={this.acceptVoiceSample}\r\n                            color=\"primary\"\r\n                            disabled={!this.state.determinedVoiceSample}>\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(Home));","export default class DragonBoard {\r\n    static IP_ADDRESS = \"127.0.0.1\";\r\n\r\n    /**\r\n     * Tells DragonBoard to start recording accelerometer values\r\n     * with a provided Firebase document id to save to\r\n     *\r\n     * @param commandId\r\n     * @returns {Promise<number>}\r\n     */\r\n    static startAccelerometer(commandId) {\r\n        return fetch(DragonBoard.IP_ADDRESS, {\r\n            method: \"POST\",\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify({command_id: commandId})\r\n        }).then(response => response.status);\r\n    }\r\n\r\n    /**\r\n     * Tells DragonBoard to stop recording - the board will upload\r\n     * to Firebase return newly generated document id in the http text\r\n     *\r\n     * @returns {Promise<string>}\r\n     */\r\n    static stopAccelerometer() {\r\n        return fetch(DragonBoard.IP_ADDRESS, {\r\n            method: \"GET\"\r\n        }).then(response => response.text())\r\n    }\r\n}","const token = \"AIzaSyA_0IhKpkkLMrzIl4zS8N306XibgNoRTP4\";\r\n\r\nexport default class GoogleSpeech {\r\n    /**\r\n     * Reads message out loud.\r\n     * Promise finishes when clip is done playing.\r\n     *\r\n     * @param message\r\n     * @returns {Promise<void>}\r\n     */\r\n    static speak(message) {\r\n        return fetch(`https://texttospeech.googleapis.com/v1/text:synthesize?key=${token}`, {\r\n            method: \"POST\",\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify({\r\n                audioConfig: {\r\n                    audioEncoding: \"MP3\",\r\n                    pitch: \"0.00\",\r\n                    speakingRate: \"1.00\"\r\n                },\r\n                input: {\r\n                    text: message\r\n                },\r\n                voice: {\r\n                    languageCode: \"en-US\",\r\n                    name: \"en-US-Wavenet-B\"\r\n                }\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const audio = new Audio(`data:audio/mp3;base64,${data.audioContent}`);\r\n                return audio.play();\r\n            })\r\n            .catch(error => console.error(error));\r\n    }\r\n}","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport Fab from \"@material-ui/core/Fab/Fab\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport BackButton from \"@material-ui/icons/KeyboardBackspace\";\r\nimport {Link} from \"react-router-dom\";\r\nimport withStyles from \"@material-ui/core/es/styles/withStyles\";\r\nimport PlayIcon from \"@material-ui/icons/PlayArrow\";\r\nimport StopIcon from \"@material-ui/icons/Stop\";\r\nimport WaitIcon from \"@material-ui/icons/HourglassFull\";\r\nimport List from \"@material-ui/core/List/List\";\r\nimport ListItem from \"@material-ui/core/ListItem/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar/Avatar\";\r\nimport moment from \"moment\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport SuccessIcon from \"@material-ui/icons/Check\";\r\nimport FailIcon from \"@material-ui/icons/Close\";\r\nimport Firebase from \"../util/Firebase\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\";\r\nimport DragonBoard from \"../util/DragonBoard\";\r\nimport GoogleSpeech from \"../util/GoogleSpeech\";\r\nimport LogoIcon from \"../components/LogoIcon\";\r\n\r\nconst styles = theme => ({\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginLeft: -12,\r\n        marginRight: 20,\r\n    },\r\n    fab: {\r\n        position: 'absolute',\r\n        bottom: theme.spacing.unit * 2,\r\n        right: theme.spacing.unit * 2,\r\n    },\r\n    successAvatar: {\r\n        margin: 10,\r\n        backgroundColor: green[400]\r\n    },\r\n    failAvatar: {\r\n        margin: 10,\r\n        backgroundColor: red[500]\r\n    },\r\n    title: {\r\n        marginTop: 20,\r\n        textAlign: \"center\"\r\n    }\r\n});\r\n\r\nclass Detail extends React.Component {\r\n    static LOOP_STATUS = {\r\n        idle: 0,\r\n        recording: 1,\r\n        wait: 2\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: undefined,\r\n            loopStatus: Detail.LOOP_STATUS.idle\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        Firebase.getCommand(this.props.match.params.id)\r\n            .then(data => this.setState({data}));\r\n    }\r\n\r\n    get successRate() {\r\n\r\n        if (this.state.data === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        const successRate = Math.round(this.state.data.successRate * 100);\r\n        return isNaN(successRate) ? 0 : successRate;\r\n    }\r\n\r\n    get title() {\r\n        if (this.state.data === undefined) {\r\n            return \"\";\r\n        }\r\n\r\n        return this.state.data.name[0].toUpperCase() + this.state.data.name.substring(1);\r\n    }\r\n\r\n    handleLoopStatusUpdate = () => {\r\n        if (this.state.loopStatus === Detail.LOOP_STATUS.idle) {\r\n            this._startRecording();\r\n        }\r\n        else if (this.state.loopStatus === Detail.LOOP_STATUS.recording) {\r\n            this._stopRecording();\r\n        }\r\n        else if (this.state.loopStatus === Detail.LOOP_STATUS.wait) {\r\n            // Do nothing - user shouldn't be allowed to click at this time\r\n        }\r\n        else {\r\n            alert(\"Oh no, something went wrong. :(\");\r\n            this.setState({\r\n                loopStatus: Detail.LOOP_STATUS.idle\r\n            });\r\n        }\r\n    };\r\n\r\n    _startRecording = () => {\r\n        this.setState({\r\n            loopStatus: Detail.LOOP_STATUS.wait\r\n        }, this._moveDog);\r\n    };\r\n\r\n    _stopRecording = () => {\r\n        this.setState({\r\n            loopStatus: Detail.LOOP_STATUS.wait\r\n        }, this._processData);\r\n    };\r\n\r\n    _moveDog = () => {\r\n        // Play TTS\r\n        GoogleSpeech.speak(this.state.data.name);\r\n\r\n        // Start recording\r\n        DragonBoard.startAccelerometer(this.props.match.params.id)\r\n            .then(status => {\r\n                if (status === 201) {\r\n                    this.setState({\r\n                        loopStatus: Detail.LOOP_STATUS.recording\r\n                    });\r\n                }\r\n                else {\r\n                    console.warn(status, \"Something went wrong. Restarting process.\");\r\n                    this.setState({\r\n                        loopStatus: Detail.LOOP_STATUS.idle\r\n                    })\r\n                }\r\n            })\r\n    };\r\n\r\n    _processData = () => {\r\n        DragonBoard.stopAccelerometer()\r\n            .then(attemptId => {\r\n                // get the attempt document and process it\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                {/* Application bar */}\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            className={classes.menuButton}\r\n                            color=\"inherit\"\r\n                            aria-label=\"back\"\r\n                            component={Link}\r\n                            to=\"/\">\r\n                            <BackButton/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                            <LogoIcon/>{\" Command Training\"}\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {\r\n                    this.state.data === undefined\r\n                        ? <CircularProgress/>\r\n                        : <div>\r\n                            {/* Success rate */}\r\n                            <Typography\r\n                                className={classes.title}\r\n                                variant=\"h2\">\r\n                                {this.successRate}%\r\n                            </Typography>\r\n                            {/* Skill name */}\r\n                            <Typography\r\n                                className={classes.title}\r\n                                variant=\"h6\">\r\n                                {this.title}\r\n                            </Typography>\r\n\r\n                            {/* History */}\r\n                            <List>\r\n                                {\r\n                                    this.state.data.attempts\r\n                                        ? this.state.data.attempts.map((item, index) => (\r\n                                            <ListItem key={index}>\r\n                                                <ListItemAvatar>\r\n                                                    <Avatar\r\n                                                        className={item.success ? classes.successAvatar : classes.failAvatar}>\r\n                                                        {\r\n                                                            item.success ? <SuccessIcon/> : <FailIcon/>\r\n                                                        }\r\n                                                    </Avatar>\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText primary={moment(item.timestamp).fromNow()}/>\r\n                                            </ListItem>\r\n                                        ))\r\n                                        : <Typography style={{padding: \"1rem\"}}>\r\n                                            No entries yet. Click the button at the bottom to start recording!\r\n                                        </Typography>\r\n                                }\r\n                            </List>\r\n                        </div>\r\n                }\r\n\r\n                {/* Loop status update */}\r\n                <Fab\r\n                    className={classes.fab}\r\n                    color=\"secondary\"\r\n                    disabled={this.state.loopStatus === Detail.LOOP_STATUS.wait}\r\n                    onClick={this.handleLoopStatusUpdate}>\r\n                    {\r\n                        this.state.loopStatus === Detail.LOOP_STATUS.idle &&\r\n                        <PlayIcon/>\r\n                    }\r\n                    {\r\n                        this.state.loopStatus === Detail.LOOP_STATUS.recording &&\r\n                        <StopIcon/>\r\n                    }\r\n                    {\r\n                        this.state.loopStatus === Detail.LOOP_STATUS.wait &&\r\n                        <WaitIcon/>\r\n                    }\r\n                </Fab>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Detail);","import React, {Component} from 'react';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Switch from \"react-router/es/Switch\";\nimport {Route} from \"react-router\";\nimport Home from \"./pages/home\";\nimport Detail from \"./pages/detail\";\nimport CssBaseline from \"@material-ui/core/CssBaseline/CssBaseline\";\nimport withStyles from \"@material-ui/core/es/styles/withStyles\";\nimport MuiThemeProvider from \"@material-ui/core/styles/MuiThemeProvider\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport {brown, green} from \"@material-ui/core/colors\";\n\nconst styles = theme => ({\n    root: {\n        backgroundColor: theme.palette.background.paper,\n        height: \"100vh\",\n        overflowY: \"scroll\"\n    }\n});\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: green[400]\n        },\n        secondary: {\n            main: brown[600]\n        }\n    }\n});\n\nclass App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n                <div className={this.props.classes.root}>\n                    <CssBaseline/>\n                    <BrowserRouter>\n                        <Switch>\n                            <Route component={Home} exact path=\"/\"/>\n                            <Route component={Detail} path=\"/detail/:id\"/>\n                        </Switch>\n                    </BrowserRouter>\n                </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default withStyles(styles)(App);\n","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            console.log('Content is cached for offline use.');\n\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    fetch(swUrl)\n        .then(response => {\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}