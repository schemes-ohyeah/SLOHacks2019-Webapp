{"version":3,"sources":["components/AudioTranscriber.js","util/Firebase.js","pages/home.js","util/DragonBoard.js","util/GoogleSpeech.js","pages/detail.js","App.js","serviceWorker.js","index.js"],"names":["AudioTranscriber","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initAudioRecorder","recognition","webkitSpeechRecognition","lang","interimResults","maxAlternatives","onresult","event","result","results","transcript","sendRecognizedSpeech","start","speechRecognition","undefined","_this2","react_default","a","createElement","className","onClick","Mic_default","React","Component","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","command","db","collection","add","name","successRate","timestamp","Date","toISOString","orderBy","get","then","querySnapshot","Promise","resolve","data","forEach","doc","dataPoint","id","push","commandId","Home","acceptVoiceSample","modalOff","addCommand","state","voiceSample","toLowerCase","docRef","history","concat","modalOn","setState","determinedVoiceSample","showModal","receiveRecognizedSpeech","commands","listCommands","classes","AppBar_default","position","Toolbar_default","Typography_default","variant","color","grow","role","aria-label","CircularProgress_default","List_default","length","style","padding","map","commandName","toUpperCase","substring","Math","round","ListItem_default","button","component","Link","key","to","ListItemText_default","primary","secondary","isNaN","Fab_default","fab","Add_default","Dialog_default","open","onClose","DialogTitle_default","DialogContent_default","dialogContent","AudioTranscriber_AudioTranscriber","DialogActions_default","Button_default","disabled","withRouter","withStyles","theme","root","backgroundColor","palette","background","paper","width","minHeight","bottom","spacing","unit","right","textAlign","DragonBoard","fetch","IP_ADDRESS","method","headers","Headers","Content-Type","body","JSON","stringify","command_id","response","status","text","GoogleSpeech","message","audioConfig","audioEncoding","pitch","speakingRate","input","voice","languageCode","json","Audio","audioContent","play","catch","error","console","Detail","handleLoopStatusUpdate","loopStatus","LOOP_STATUS","idle","_startRecording","recording","_stopRecording","wait","alert","_moveDog","_processData","speak","startAccelerometer","match","params","warn","stopAccelerometer","attemptId","getCommand","AppBar_AppBar_default","Toolbar_Toolbar_default","IconButton_default","menuButton","KeyboardBackspace_default","Typography_Typography_default","title","attempts","item","index","ListItemAvatar_default","Avatar_default","success","successAvatar","failAvatar","Check_default","Close_default","moment","fromNow","Fab_Fab_default","PlayArrow_default","Stop_default","HourglassFull_default","flexGrow","marginLeft","marginRight","margin","green","red","marginTop","App","CssBaseline_default","BrowserRouter","Switch","Route","exact","path","height","overflowY","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a19ceafb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport \"./AudioTranscriber.css\";\r\n\r\nexport default class AudioTranscriber extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.speechRecognition = undefined;\r\n        this.initAudioRecorder();\r\n    }\r\n\r\n    initAudioRecorder = () => {\r\n        // eslint-disable-next-line\r\n        const recognition = new webkitSpeechRecognition();\r\n        recognition.lang = \"en-US\";\r\n        recognition.interimResults = false;\r\n        recognition.maxAlternatives = 1;\r\n\r\n        recognition.onresult = (event) => {\r\n            const result = event.results[0][0].transcript;\r\n            this.props.sendRecognizedSpeech(result);\r\n        };\r\n\r\n        recognition.start();\r\n\r\n        this.speechRecognition = recognition;\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mic-icon-animation\" onClick={() => this.speechRecognition.start()}>\r\n                <MicIcon/>\r\n            </div>\r\n        );\r\n    }\r\n}","import * as firebase from \"firebase\";\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyA_0IhKpkkLMrzIl4zS8N306XibgNoRTP4\",\r\n    authDomain: \"slohacks-dog-instrucc.firebaseapp.com\",\r\n    databaseURL: \"https://slohacks-dog-instrucc.firebaseio.com\",\r\n    projectId: \"slohacks-dog-instrucc\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"504644134709\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nexport default class Firebase {\r\n    static db = firebase.firestore();\r\n\r\n    /**\r\n     * Adds a new command\r\n     *\r\n     * @param command\r\n     * @returns {Promise<firebase.firestore.DocumentReference>}\r\n     */\r\n    static addCommand(command) {\r\n        return Firebase.db.collection(\"commands\").add({\r\n            name: command,\r\n            successRate: 0,\r\n            timestamp: new Date().toISOString()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all commands sorted newest first. Document id\r\n     * is merged into the document data for convenient look up\r\n     *\r\n     * @returns {Promise<firebase.firestore.QuerySnapshot>}\r\n     */\r\n    static listCommands() {\r\n        return Firebase.db\r\n            .collection(\"commands\")\r\n            .orderBy(\"timestamp\", \"desc\")\r\n            .get()\r\n            .then(querySnapshot => {\r\n                return new Promise(resolve => {\r\n                    const data = [];\r\n                    querySnapshot.forEach(doc => {\r\n                        const dataPoint = doc.data();\r\n                        dataPoint.id = doc.id;\r\n                        data.push(dataPoint);\r\n                    });\r\n                    resolve(data);\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets the details of a specific command - unlike listCommands,\r\n     * document id is not merged into the response because it is already\r\n     * known (provided as argument)\r\n     *\r\n     * @param commandId\r\n     * @returns {Promise<firebase.firestore.DocumentData>}\r\n     */\r\n    static getCommand(commandId) {\r\n        return Firebase.db\r\n            .collection(\"commands\")\r\n            .doc(commandId)\r\n            .get()\r\n            .then(doc => {\r\n                return doc.data();\r\n            })\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport List from \"@material-ui/core/List/List\";\r\nimport ListItem from \"@material-ui/core/ListItem/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport Dialog from \"@material-ui/core/Dialog/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions/DialogActions\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport DialogContent from \"@material-ui/core/DialogContent/DialogContent\";\r\nimport {Link} from \"react-router-dom\";\r\nimport AudioTranscriber from \"../components/AudioTranscriber\";\r\nimport Firebase from \"../util/Firebase\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\";\r\nimport {withRouter} from \"react-router\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        width: 500,\r\n        position: 'relative',\r\n        minHeight: 200,\r\n    },\r\n    fab: {\r\n        position: 'absolute',\r\n        bottom: theme.spacing.unit * 2,\r\n        right: theme.spacing.unit * 2,\r\n    },\r\n    dialogContent: {\r\n        textAlign: \"center\"\r\n    }\r\n});\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            commands: undefined,\r\n            determinedVoiceSample: false,\r\n            showModal: false,\r\n            voiceSample: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        Firebase.listCommands().then(commands => this.setState({commands}));\r\n    }\r\n\r\n    acceptVoiceSample = () => {\r\n        this.modalOff();\r\n        Firebase.addCommand(this.state.voiceSample.toLowerCase())\r\n            .then(docRef => {\r\n                this.props.history.push(`/detail/${docRef.id}`);\r\n            });\r\n    };\r\n\r\n    modalOn = () => {\r\n        this.setState({\r\n            determinedVoiceSample: false,\r\n            showModal: true,\r\n            voiceSample: \"\"\r\n        });\r\n    };\r\n\r\n    modalOff = () => {\r\n        this.setState({\r\n            showModal: false\r\n        });\r\n    };\r\n\r\n    receiveRecognizedSpeech = (result) => {\r\n        this.setState({\r\n            determinedVoiceSample: true,\r\n            voiceSample: result\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n        return (\r\n            <div>\r\n                {/* Application bar */}\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                            <span role=\"img\" aria-label=\"Dog emoji\">🐶</span>{\" Dog Instrucc\"}\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {/* List of doggo commands */}\r\n                {\r\n                    this.state.commands === undefined\r\n                        ? <CircularProgress/>\r\n                        : <List>\r\n                            {\r\n                                this.state.commands.length === 0\r\n                                    ? <Typography style={{padding: \"1rem\"}}>\r\n                                        No entries yet. Click the button at the bottom to get started!\r\n                                    </Typography>\r\n                                    : this.state.commands.map(command => {\r\n                                        const commandName = command.name[0].toUpperCase() + command.name.substring(1);\r\n                                        const successRate = Math.round(command.successRate * 100);\r\n                                        return (\r\n                                            <ListItem\r\n                                                button\r\n                                                component={Link}\r\n                                                key={command.id}\r\n                                                to={`/detail/${command.id}`}>\r\n                                                <ListItemText\r\n                                                    primary={commandName}\r\n                                                    secondary={`${isNaN(successRate) ? 0 : successRate}%`}/>\r\n                                            </ListItem>\r\n                                        );\r\n                                    })\r\n                            }\r\n                        </List>\r\n                }\r\n\r\n                {/* Add new command button */}\r\n                <Fab\r\n                    className={classes.fab}\r\n                    color=\"secondary\"\r\n                    onClick={this.modalOn}>\r\n                    <AddIcon/>\r\n                </Fab>\r\n\r\n                {/* Add new command modal */}\r\n                <Dialog\r\n                    open={this.state.showModal}\r\n                    onClose={this.state.modalOff}>\r\n                    <DialogTitle>Speak a voice command</DialogTitle>\r\n                    <DialogContent className={classes.dialogContent}>\r\n                        <AudioTranscriber\r\n                            sendRecognizedSpeech={this.receiveRecognizedSpeech}/>\r\n                        <Typography>{this.state.voiceSample}</Typography>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button\r\n                            onClick={this.modalOff}\r\n                            color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            onClick={this.acceptVoiceSample}\r\n                            color=\"primary\"\r\n                            disabled={!this.state.determinedVoiceSample}>\r\n                            OK\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(Home));","export default class DragonBoard {\r\n    static IP_ADDRESS = \"127.0.0.1\";\r\n\r\n    /**\r\n     * Tells DragonBoard to start recording accelerometer values\r\n     * with a provided Firebase document id to save to\r\n     *\r\n     * @param commandId\r\n     * @returns {Promise<number>}\r\n     */\r\n    static startAccelerometer(commandId) {\r\n        return fetch(DragonBoard.IP_ADDRESS, {\r\n            method: \"POST\",\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify({command_id: commandId})\r\n        }).then(response => response.status);\r\n    }\r\n\r\n    /**\r\n     * Tells DragonBoard to stop recording - the board will upload\r\n     * to Firebase return newly generated document id in the http text\r\n     *\r\n     * @returns {Promise<string>}\r\n     */\r\n    static stopAccelerometer() {\r\n        return fetch(DragonBoard.IP_ADDRESS, {\r\n            method: \"GET\"\r\n        }).then(response => response.text())\r\n    }\r\n}","const token = \"AIzaSyA_0IhKpkkLMrzIl4zS8N306XibgNoRTP4\";\r\n\r\nexport default class GoogleSpeech {\r\n    /**\r\n     * Reads message out loud.\r\n     * Promise finishes when clip is done playing.\r\n     *\r\n     * @param message\r\n     * @returns {Promise<void>}\r\n     */\r\n    static speak(message) {\r\n        return fetch(`https://texttospeech.googleapis.com/v1/text:synthesize?key=${token}`, {\r\n            method: \"POST\",\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            }),\r\n            body: JSON.stringify({\r\n                audioConfig: {\r\n                    audioEncoding: \"MP3\",\r\n                    pitch: \"0.00\",\r\n                    speakingRate: \"1.00\"\r\n                },\r\n                input: {\r\n                    text: message\r\n                },\r\n                voice: {\r\n                    languageCode: \"en-US\",\r\n                    name: \"en-US-Wavenet-B\"\r\n                }\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const audio = new Audio(`data:audio/mp3;base64,${data.audioContent}`);\r\n                return audio.play();\r\n            })\r\n            .catch(error => console.error(error));\r\n    }\r\n}","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport Fab from \"@material-ui/core/Fab/Fab\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport BackButton from \"@material-ui/icons/KeyboardBackspace\";\r\nimport {Link} from \"react-router-dom\";\r\nimport withStyles from \"@material-ui/core/es/styles/withStyles\";\r\nimport PlayIcon from \"@material-ui/icons/PlayArrow\";\r\nimport StopIcon from \"@material-ui/icons/Stop\";\r\nimport WaitIcon from \"@material-ui/icons/HourglassFull\";\r\nimport List from \"@material-ui/core/List/List\";\r\nimport ListItem from \"@material-ui/core/ListItem/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar/Avatar\";\r\nimport moment from \"moment\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport SuccessIcon from \"@material-ui/icons/Check\";\r\nimport FailIcon from \"@material-ui/icons/Close\";\r\nimport Firebase from \"../util/Firebase\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\";\r\nimport DragonBoard from \"../util/DragonBoard\";\r\nimport GoogleSpeech from \"../util/GoogleSpeech\";\r\n\r\nconst styles = theme => ({\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginLeft: -12,\r\n        marginRight: 20,\r\n    },\r\n    fab: {\r\n        position: 'absolute',\r\n        bottom: theme.spacing.unit * 2,\r\n        right: theme.spacing.unit * 2,\r\n    },\r\n    successAvatar: {\r\n        margin: 10,\r\n        backgroundColor: green[500]\r\n    },\r\n    failAvatar: {\r\n        margin: 10,\r\n        backgroundColor: red[500]\r\n    },\r\n    title: {\r\n        marginTop: 10,\r\n        textAlign: \"center\"\r\n    }\r\n});\r\n\r\nclass Detail extends React.Component {\r\n    static LOOP_STATUS = {\r\n        idle: 0,\r\n        recording: 1,\r\n        wait: 2\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: undefined,\r\n            loopStatus: Detail.LOOP_STATUS.idle\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        Firebase.getCommand(this.props.match.params.id)\r\n            .then(data => this.setState({data}));\r\n    }\r\n\r\n    get successRate() {\r\n\r\n        if (this.state.data === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        const successRate = Math.round(this.state.data.successRate * 100);\r\n        return isNaN(successRate) ? 0 : successRate;\r\n    }\r\n\r\n    get title() {\r\n        if (this.state.data === undefined) {\r\n            return \"\";\r\n        }\r\n\r\n        return this.state.data.name[0].toUpperCase() + this.state.data.name.substring(1);\r\n    }\r\n\r\n    handleLoopStatusUpdate = () => {\r\n        if (this.state.loopStatus === Detail.LOOP_STATUS.idle) {\r\n            this._startRecording();\r\n        }\r\n        else if (this.state.loopStatus === Detail.LOOP_STATUS.recording) {\r\n            this._stopRecording();\r\n        }\r\n        else if (this.state.loopStatus === Detail.LOOP_STATUS.wait) {\r\n            // Do nothing - user shouldn't be allowed to click at this time\r\n        }\r\n        else {\r\n            alert(\"Oh no, something went wrong. :(\");\r\n            this.setState({\r\n                loopStatus: Detail.LOOP_STATUS.idle\r\n            });\r\n        }\r\n    };\r\n\r\n    _startRecording = () => {\r\n        this.setState({\r\n            loopStatus: Detail.LOOP_STATUS.wait\r\n        }, this._moveDog);\r\n    };\r\n\r\n    _stopRecording = () => {\r\n        this.setState({\r\n            loopStatus: Detail.LOOP_STATUS.wait\r\n        }, this._processData);\r\n    };\r\n\r\n    _moveDog = () => {\r\n        // Play TTS\r\n        GoogleSpeech.speak(this.state.data.name);\r\n\r\n        // Start recording\r\n        DragonBoard.startAccelerometer(this.props.match.params.id)\r\n            .then(status => {\r\n                if (status === 201) {\r\n                    this.setState({\r\n                        loopStatus: Detail.LOOP_STATUS.recording\r\n                    });\r\n                }\r\n                else {\r\n                    console.warn(status, \"Something went wrong. Restarting process.\");\r\n                    this.setState({\r\n                        loopStatus: Detail.LOOP_STATUS.idle\r\n                    })\r\n                }\r\n            })\r\n    };\r\n\r\n    _processData = () => {\r\n        DragonBoard.stopAccelerometer()\r\n            .then(attemptId => {\r\n                // get the attempt document and process it\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const {classes} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                {/* Application bar */}\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            className={classes.menuButton}\r\n                            color=\"inherit\"\r\n                            aria-label=\"back\"\r\n                            component={Link}\r\n                            to=\"/\">\r\n                            <BackButton/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                            <span role=\"img\" aria-label=\"Dog emoji\">🐶</span>{\" Command Training\"}\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {\r\n                    this.state.data === undefined\r\n                        ? <CircularProgress/>\r\n                        : <div>\r\n                            {/* Success rate */}\r\n                            <Typography\r\n                                className={classes.title}\r\n                                variant=\"h2\">\r\n                                {this.successRate}%\r\n                            </Typography>\r\n                            {/* Skill name */}\r\n                            <Typography\r\n                                className={classes.title}\r\n                                variant=\"h6\">\r\n                                {this.title}\r\n                            </Typography>\r\n\r\n                            {/* History */}\r\n                            <List>\r\n                                {\r\n                                    this.state.data.attempts\r\n                                        ? this.state.data.attempts.map((item, index) => (\r\n                                            <ListItem key={index}>\r\n                                                <ListItemAvatar>\r\n                                                    <Avatar\r\n                                                        className={item.success ? classes.successAvatar : classes.failAvatar}>\r\n                                                        {\r\n                                                            item.success ? <SuccessIcon/> : <FailIcon/>\r\n                                                        }\r\n                                                    </Avatar>\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText primary={moment(item.timestamp).fromNow()}/>\r\n                                            </ListItem>\r\n                                        ))\r\n                                        : <Typography style={{padding: \"1rem\"}}>\r\n                                            No entries yet. Click the button at the bottom to start recording!\r\n                                        </Typography>\r\n                                }\r\n                            </List>\r\n                        </div>\r\n                }\r\n\r\n                {/* Loop status update */}\r\n                <Fab\r\n                    className={classes.fab}\r\n                    color=\"secondary\"\r\n                    disabled={this.state.loopStatus === Detail.LOOP_STATUS.wait}\r\n                    onClick={this.handleLoopStatusUpdate}>\r\n                    {\r\n                        this.state.loopStatus === Detail.LOOP_STATUS.idle &&\r\n                        <PlayIcon/>\r\n                    }\r\n                    {\r\n                        this.state.loopStatus === Detail.LOOP_STATUS.recording &&\r\n                        <StopIcon/>\r\n                    }\r\n                    {\r\n                        this.state.loopStatus === Detail.LOOP_STATUS.wait &&\r\n                        <WaitIcon/>\r\n                    }\r\n                </Fab>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Detail);","import React, {Component} from 'react';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Switch from \"react-router/es/Switch\";\nimport {Route} from \"react-router\";\nimport Home from \"./pages/home\";\nimport Detail from \"./pages/detail\";\nimport CssBaseline from \"@material-ui/core/CssBaseline/CssBaseline\";\nimport withStyles from \"@material-ui/core/es/styles/withStyles\";\n\nconst styles = theme => ({\n    root: {\n        backgroundColor: theme.palette.background.paper,\n        height: \"100vh\",\n        overflowY: \"scroll\"\n    }\n});\n\nclass App extends Component {\n    render() {\n        return (\n            <div className={this.props.classes.root}>\n                <CssBaseline/>\n                <BrowserRouter>\n                    <Switch>\n                        <Route component={Home} exact path=\"/\"/>\n                        <Route component={Detail} path=\"/detail/:id\"/>\n                    </Switch>\n                </BrowserRouter>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(App);\n","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            console.log('Content is cached for offline use.');\n\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    fetch(swUrl)\n        .then(response => {\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}